
	/* 순 주문 기준으로 고객별 주문 건수와 주문 금액을 집계하는 방법 */


	/* 총 주문 기준으로 집계한 쿼리 */
	-- 고객별 주문 건수, 주문 금액 집계
	SELECT	T.CUSTOMER_ID
		,	COUNT(DISTINCT T.TRANSACTION_ID)	AS CNT_ORDER
		,	SUM(T.TOTAL_AMT)					AS SUM_AMT
	FROM	TRANSACTIONS AS T
	GROUP BY
			1
	;

	/* 고객별 순 주문 건수, 순 주문 금액 집계 */

	-- Sol. USING NOT EXISTS
	/* 대용량 데이터를 처리할때 성능 이슈가 발생할 수 있 */
	SELECT	T.CUSTOMER_ID
		,	COUNT(DISTINCT T.TRANSACTION_ID)	AS CNT_ORDER
		,	SUM(T.TOTAL_AMT)					AS SUM_AMT
	FROM	TRANSACTIONS AS T
	WHERE	NOT EXISTS (
						SELECT	X.TRANSACTION_ID
						FROM	TRANSACTIONS AS X
						WHERE	X.QTY < 0
						AND		X.TRANSACTION_ID = T.TRANSACTION_ID	)
	GROUP BY
			1
	;
	
	--Sol. USING NOT IN
	/* 대용량 데이터를 처리할때 성능 이슈가 발생할 수 있음 */
	SELECT	T.CUSTOMER_ID
		,	COUNT(DISTINCT T.TRANSACTION_ID)	AS CNT_ORDER
		,	SUM(T.TOTAL_AMT)					AS SUM_AMT
	FROM	TRANSACTIONS AS T
	WHERE	T.TRANSACTION_ID NOT IN (
										SELECT	TRANSACTION_ID
										FROM	TRANSACTIONS
										WHERE	QTY < 0
												)
	GROUP BY	1
	;


	--Sol. USING LEFT OUTER JOIN
	/* 위 두 가지 방법 대비 대용량 데이터 처리시 성능 이슈가 적은 편 */
	SELECT	T.CUSTOMER_ID
		,	COUNT(DISTINCT T.TRANSACTION_ID)	AS CNT_ORDER
		,	SUM(T.TOTAL_AMT)					AS SUM_AMT
	FROM	TRANSACTIONS AS T
	LEFT OUTER JOIN
			( SELECT	TRANSACTION_ID
			  FROM		TRANSACTIONS
			  WHERE		QTY < 0
			  			)	AS X
	ON		T.TRANSACTION_ID = X.TRANSACTION_ID
	WHERE	X.TRANSACTION_ID IS NULL
	GROUP BY
			1
			;